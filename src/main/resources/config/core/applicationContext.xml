<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
	       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd"
	default-autowire="byName" default-lazy-init="true">
	<!--Spring 读取.property数据库配置文件-->
  	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
       <property name="locations">  
           <list>
               <value>classpath:/datasource.properties</value>
               <value>classpath:/prop.properties</value>
           </list>  
       </property>  
   </bean>
   		<!--自动扫描含有@Service将其注入为bean -->
	<context:component-scan base-package="org.andy.shop.service" />
   	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!-- 驱动-->
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<!-- 连接数据库的URL-->
		<property name="jdbcUrl" value="jdbc:mysql://192.168.2.104:3306/tiku" />
		<!--用户名。Default: null-->  
		<property name="user" value="root" />
		<!--密码。Default: null-->  
		<property name="password" value="mysql" />
		<!--连接池中保留的最小连接数。Default: 1 -->  
		<property name="minPoolSize" value="1"></property>
		<!--连接池中保留的最大连接数。Default: 15 -->  
		<property name="maxPoolSize" value="20"></property>
		<!--最大空闲时间,120000秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->  
		<property name="maxIdleTime" value="120000"></property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="2"></property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。  
        	但由于预缓存的Statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素.  
       		 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->  
		<property name="maxStatements" value="0"></property>
		<!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="2"></property>
		<property name="idleConnectionTestPeriod" value="1800"></property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->  
		<property name="acquireRetryAttempts" value="30"></property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。  
        		但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。  
        		如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false--> 
		<property name="breakAfterAcquireFailure" value="true"></property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。  
        	建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能。Default: false --> 
		<property name="testConnectionOnCheckout" value="true"></property>
	</bean>
		<!--
		mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源
		MyBatis定义数据源,同意加载配置-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation" value="classpath:/config/core/mybatis-config.xml" /> 
	</bean>
		
		<!--
		 mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory
		basePackage:指定sql映射文件/接口所在的包（自动扫描）
		事务管理器配置,单数据源事务
		-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.sun.mis.dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="dataSource"></property>
	</bean>

		<!-- 事务管理配置 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" rollback-for="Exception"  propagation="REQUIRED"/>
			<tx:method name="modify*" rollback-for="Exception"  propagation="REQUIRED"/>
			<tx:method name="remove*" rollback-for="Exception"  propagation="REQUIRED"/>
			<tx:method name="query*"  propagation="REQUIRED" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.sun.mis.service.impl.*.add*(..))||execution(* com.sun.mis.service.impl.*.modify*(..))||execution(* com.sun.mis.service.impl.*.remove*(..))||execution(* com.sun.mis.service.impl.*.query*(..))||execution(* com.sun.mis.rest.service.impl.*.add*(..))||execution(* com.sun.mis.rest.service.impl.*.modify*(..))||execution(* com.sun.mis.rest.service.impl.*.remove*(..))||execution(* com.sun.mis.rest.service.impl.*.query*(..))" advice-ref="txAdvice" />
	</aop:config>
</beans>